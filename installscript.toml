# SPDX-License-Identifier: CC0-1.0
language = 'Zig'
display = 'Zig (Zig 0.14.1)'
license = [
    { name = 'MIT', url = 'https://github.com/ziglang/zig/blob/master/LICENSE' },
]

library.ac-library-zig = { license = [
    { name = 'CC0-1.0', url = 'https://github.com/Ryoga-exe/ac-library-zig/blob/main/LICENSE' },
], version = 'v0.4.0' }
library.proconio-zig = { license = [
    { name = 'MIT', url = 'https://github.com/Ryoga-exe/proconio-zig/blob/main/LICENSE' },
], version = 'v0.3.0' }

filename = 'src/main.zig'

install = '''
AC_ZIG_VERSION=0.15.1
sudo apt-get update
sudo apt-get install -y --no-install-recommends git
pushd /tmp
wget -q https://ziglang.org/download/${AC_ZIG_VERSION}/zig-x86_64-linux-${AC_ZIG_VERSION}.tar.xz
sudo tar -C /opt -xf zig-x86_64-linux-${AC_ZIG_VERSION}.tar.xz
sudo ln -s /opt/zig-x86_64-linux-${AC_ZIG_VERSION}/zig /usr/local/bin/zig
popd

# Create Project
zig init
rm src/root.zig

# Install Libraries
zig fetch --save=ac-library git+https://github.com/Ryoga-exe/ac-library-zig#v0.4.0

zig fetch --save=proconio git+https://github.com/Ryoga-exe/proconio-zig#v0.3.0

cat << EOF > build.zig
const std = @import("std");

pub fn build(b: *std.Build) void {
    const target = b.standardTargetOptions(.{});
    const optimize = b.standardOptimizeOption(.{});
    const exe_mod = b.createModule(.{
        .root_source_file = b.path("src/main.zig"),
        .target = target,
        .optimize = optimize,
    });

    const exe = b.addExecutable(.{
        .name = "judge",
        .root_module = exe_mod,
    });
    b.installArtifact(exe);

    const ac_library = b.dependency("ac-library", .{
        .target = target,
        .optimize = optimize,
    });
    exe_mod.addImport("ac-library", ac_library.module("ac-library"));

    const proconio = b.dependency("proconio", .{
        .target = target,
        .optimize = optimize,
    });
    exe_mod.addImport("proconio", proconio.module("proconio"));
}
EOF

cat << 'EOF' > src/main.zig
const std = @import("std");
const ac = @import("ac-library");

pub fn main() !void {
    const allocator = std.heap.page_allocator;
    var d = try ac.Dsu.init(allocator, 10);
    defer d.deinit();
    _ = d.merge(0, 1);
    try std.testing.expect(d.same(0, 1));
    _ = d.merge(1, 5);
    var g = try d.groups();
    std.debug.print("{any}\n", .{g.get(0)});
}
EOF
zig build --release -Doptimize=ReleaseFast
./zig-out/bin/judge
rm zig-out/bin/judge
'''

compile = '''
zig build --release -Doptimize=ReleaseFast
'''

object = 'zig-out/bin/judge'

execution = ['./zig-out/bin/judge']
